.TH COLLECTL-DATA 1 "JANUARY 2005" LOCAL "Collectl" -*- nroff -*-

Collectl can generate output in multiple formats.  Although --verbose is the most 
complete, the default format, aka brief, is the one viewed by most users.

.SH BRIEF FORMAT

This format does NOT include data for any individual devices such as cpu, disk, 
network, nfs, lustre, process, slabs or tcp.  If you do select any one of them it collectl 
with force --verbose format.

.SH CPU [-sc]
.nf
#<--------CPU-------->
#cpu sys inter  ctxsw
.fi

.B cpu
.RS
Percent of time the cpu was busy during the current interval averaged across all CPUs, which
which includes to system, user and nice times.  Note that this does NOT include wait.
.RE
.B sys
.RS
Percentage of time the cpu was executing in system mode during the current interval.  To
determine the amount of time spent not at the system you need to subtract this from the cpu
field.
.RE
.B inter
.RS
Total number of interrupts/sec.
.RE
.B ctxsw
.RS
Total number of context switches/sec.
.RE

.SH Disks [-sd]
There are currently 3 places that collectl can gather disk performance data from.
Fortunately you don't really have to worry about it unless you really care.
In the 2.4 kernel, the most detailed disk data is stored in /proc/partitions and that
is indeed where collectl tries to get it from.  However, some older kernels may not
have been configured to provide this data in which case collectl will grab less 
detailed data from /proc/stat.  In the 2.6 kernel, performance data has been moved 
from /proc/partitions to /proc/diskstats and so it is gathered from there.

In any event, regardless of where the data comes from it is all presented in the same
format.  This means some fields may be 0 (2.4 kernels and /proc/stat) when displayed
with --verbose, but it is expected few systems will fall into this category.

.nf
#<-----------Disks----------->
#KBRead  Reads  KBWrit Writes
.fi

.B KBRead
.RS
KB read/sec
.RE
.B Reads
.RS
Number of reads/sec
.RE
.B KBWrite
.RS
KB written/sec
.RE
.B Writes
.RS
Number of writes/sec
.RE

.SH Interconnect [-sx]
.nf
#<----------InfiniBand---------->
#  KBin  pktIn  KBOut pktOut Errs
.fi

.B KBin
.RS
KB received/sec.
.RE
.B pckIn
.RS
Packets received/sec.
.RE
.B KBout
.RS
KB sent/sec.
.RE
.B pktOut
.RS
Packets sent/sec.
.RE
.B Errs
.RS
Count of current errors.  Since these are typically infrequent, it is felt that reporting
them as a rate would result in either not seeing them OR round-off hiding their values.
.RE

.SH Lustre [-sl]

Lustre data actually falls into one of 3 categories - client, mds and oss.  Collectl
determines the type of system it is running on (a system can have multiple 
personalities) and reports on all it finds, unless specifically selected via -L.

.SH Lustre Client

.nf
#<-------Lustre Client------>
# Reads KBRead Writes KBWrite
.fi

.B Reads
.RS
Reads/sec delivered to the client, not necessarily from the lustre
storage servers.
.RE
.B KBRead
.RS
KB/sec delivered to the client.
.RE
.B Writes
.RS
Writes/sec delievered to the storage servers.
.RE
.B KBWrite
.RS
KB Writes/sec delievered to the storage servers.
.RE

The following format of lustre client data is selected by including -OR and
adds readahead statistics to the previous four.

.nf
#<-------------Lustre Client-------------->
# Reads KBRead Writes KBWrite   Hits Misses
.fi

.B Hits
.RS
Number of reads/sec from the lustre data cache.
.RE
.B Misses
.RS
Number of misses/sec which must then be satisfied by reading from
the storage servers.
.RE

.SH Lustre MDS (Meta-Data Server)

.nf
#<--------Lustre MDS-------->
#mdsCls Getatt  Reint   sync
.fi

.B mdsCls
.RS
Number of file closes/sec.
.RE
.B Getatt
.RS
Number of getattrs/sec.
.RE
.B Reint
.RS
Reintegrated operations/sec which are inode modifications and unklinks.
.RE
.B Sync
.RS
Number of syncs/sec.
.RE

.SH Lustre OSS (Object Storage Server)

.nf
#<--------Lustre OST------->
#KBRead  Reads KBWrit Writes
.fi

.B KBRead
.RS
KB/sec read
.RE
.B Reads
.RS
Reads/sec
.RE
.B KBWrite
.RS
KB/sec written
.RE
.B Writes
.RS
Writes/sec
.RE

.SH Memory [-sm]
.nf
#<-----------Memory---------->
#free buff cach inac slab  map
.fi

.B free
.RS
Total free memory, which unfortunately is NOT the difference between total memory
and the following amounts allocated to used memory.
.RE
.B buff
.RS
Memory used as system buffers.
.RE
.B cach
.RS
This is also commonly known as the file system buffer cache as buffered I/O uses this
memory to cache the data.
.RE
.B inac
.RS
Inactive memory.
.RE
.B slab
.RS
Total memory allocated to slabs.
.RE
.B map
.RS
Total mapped memory.
.RE

.SH Network [-sn]
.nf
#<-----------Network---------->
#netKBi pkt-in  netKBo pkt-out
.fi

.B netKBi
.RS
KB received/sec over all real network interfaces and therefore excludes 'lo' and 'sit'.
.RE
.B pkt-in
.RS
Packets received/sec over all real network interfaces.
.RE
.B netKBo
.RS
KB sent/sec over all real network interfaces.
.RE
.B pkt-out
.RS
Packets sent/sec over all real network interfaces.
.RE

.SH NFS [-sf]
.nf
#<--NFS Svr Summary-->
#  read  write  calls
.fi

.B read
.RS
Total nfs reads/sec.
.RE
.B write
.RS
Total nfs writes/sec.
.RE
.B calls
.RS
Total nfs calls/sec.
.RE

.SH Slabs [-sy]
.nf
#<----slab---->
# Alloc   Bytes
.fi

.B Alloc
.RS
Total Number of slabs allocated
.RE
.B Bytes
.RS
Total Number of bytes allocated as slabs
.RE

.SH Sockets [-ss]
.nf
#<------Sockets----->
#  Tcp  Udp  Raw Frag
.fi

.B Tcp
.RS
Total TCP sockets currently in use.
.RE
.B Udp
.RS
Total UDP sockets currently in use.
.RE
.B Raw
.RS
Total RAW sockets currently in use.
.RE
.B Frag
.RS
Total number of IP fragments queues currently in use.
.RE

.SH TCP [-st]
.nf
#<------------TCP------------>
#PureAcks HPAcks   Loss FTrans
.fi

.B PureAcks
.RS
ACKs/sec that only contain acks (ie no data).
.RE
.B HPAcks
.RS
Fast-path acks/sec.
.RE
.B Loss
.RS
Packets/sec TCP thinks have been lost coming in.
.RE
.B FTrans
.RS
Fast retransmissions/sec.
.RE

.SH VERBOSE FORMAT

Data is reported in this form when either --verbose is used OR if there is at least one
type of data requested that doesn't have a brief form such as any detail data or 
ionodes, processes or slabs.  Specifying some of the lustre output options with -O such 
as B, D and M will also force verbose format.

Since many of the data fields reported in verbose format are also reported in brief form
their definitions will usually not be repeated.  This is also true as data being reported
as summary and detail data as well.

.SH CPU
.nf
# CPU SUMMARY (INTR, CTXSW & PROC /sec)
# USER  NICE   SYS  IDLE  WAIT  INTR  CTXSW  PROC  RUNQ   RUN   AVG1  AVG5 AVG15
.fi

.B User, Nice, Sys, Idle, Wait
.RS
These are the percentage of time the system in running is one of these modes, noting that
these are averaged across all CPUs
.RE
.B Proc
.RS
Process creations/sec.
.RE
.B Runq
.RS
Number of processes in the run queue.
.RE
.B Run
.RS
Number of processes in the run state.
.RE
.B Avg1, Avg5, Avg15
.RS
Load average over the last 1,5 and 15 minutes.
.RE

CPU detail data reports the percentage of time each individual cpu
spends in user, nice, sys, idle and wait.

.nf
# SINGLE CPU STATISTICS
#   CPU  USER NICE  SYS IDLE WAIT
.fi

.SH Disk
.nf
# DISK SUMMARY (/sec)
#Reads  R-Merged  R-KBytes   Writes  W-Merged  W-KBytes
.fi

.B R-Merged
.RS
Read requests merged per second when being dequeued.
These statistics are not available in older kernels which 
only record disk statistics in /proc/stat.
.RE
.B W-Merged
.RS
Write requests merged per second when being dequeued.
.RE

.nf
# DISK STATISTICS (/sec)
#          <-------reads--------><-------writes------><----------averages---------->  Percent
#Name        Ops  Merged  KBytes   Ops  Merged  KBytes  Request  QueLen   Wait SvcTim    Util
.fi

.B Name
.RS
Name of the disk the statistics are being reported for.
.RE
.B Request
.RS
Average I/O request size in KB
.RE
.B QueLen
.RS
Average number of requests queued
.RE
.B Wait
.RS
Average time a request has been waiting in the queue
.RE
.B SvcTim
.RS
Average time for a reuest to be serviced by the device
.RE
.B Util
.RS
Percentage of CPU time during which I/O requests were issued
.RE

.SH Inodes/Filesystem
.nf
# INODE SUMMARY
#DCache  ---OpenFiles---           -----SBlock-----   ----DQuot----
# Unusd  Handles   % Max    Inode  Handles    % Max   Entry   % Max
.fi

.B "DCache Unusd"
.RS
Number of unused entries in directory cache
.RE
.B "OpenFiles Handles"
.RS
Number of open file handles
.RE
.B "OpenFiles % Max"
.RS
Percentage of maximum available file handles
.RE
.B "Inode"
.RS
Number of user inode handles
.RE
.B "SBlock Handles"
.RS
Number of allocated Super Blocks handlers
.RE
.B "SBlock % Max"
.RS
Percentage of maximum allowed
.RE
.B "DQuot Entry"
.RS
Number of allocated Disk Quota Entries
.RE
.B "DQuot % Max"
.RS
Percentage of maximum allowed
.RE

.SH Interconnect [-sx]
.nf
# INFINIBAND SUMMARY (/sec)
# OpsIn  OpsOut   KB-In  KB-Out  Errors
.fi

Other than the fact the field names are different than those used in brief format
their meanings are identical.  The same is true for detail level data, except it
includes the interface name as well.

.nf
# INFINIBAND STATISTICS (/sec)
#HCA    OpsIn  OpsOut   KB-In  KB-Out  Errors
.fi

.SH Lustre

.SH Lustre Client
There are several formats here controlled by the -O switch.  There is also detail data for these
available as well.  Specifying -sL results in data broken out by the file system and -sLL breaks 
it out by OST.

.nf
# LUSTRE CLIENT SUMMARY
# Reads ReadKB  Writes WriteKB
.fi

These data fields are identical to brief format and also occur in the metadata
display as well as the rpc-buffer format, only in that case they're called
rds, rrdk, wrts and wrtk to save screen real estate.

.nf
# LUSTRE CLIENT SUMMARY: METADATA
# Reads ReadKB  Writes WriteKB  Open Close GAttr SAttr  Seek Fsync DrtHit DrtMis
.fi

.B Open
.RS
File opens/sec
.RE
.B Close
.RS
File closes/sec
.RE
.B GAttr
.RS
getattrs/sec
.RE
.B Seek
.RS
seeks/sex
.RE
.B Fsync
.RS
fsyncs/sex
.RE
.B DrtHit
.RS
dirty hits/sec
.RE
.B DrtMis
.RS
dirty misses/sec
.RE

.nf
# LUSTRE CLIENT SUMMARY: READAHEAD
# Reads ReadKB  Writes WriteKB  Pend  Hits Misses NotCon MisWin LckFal  Discrd ZFile ZerWin RA2Eof HitMax
.fi

.B Pend
.RS
Pending issued pages
.RE
.B Hits
.RS
Cache hits
.RE
.B Misses
.RS
Cache misses
.RE
.B NotCon
.RS
Read page not consecutive
.RE
.B MisWin
.RS
Miss iniside window
.RE
.B LckFal
.RS
Failed grab_cache_page
.RE
.B Discrd
.RS
Read but discarded
.RE
.B ZFile
.RS
Zero length file
.RE
.B ZerWin
.RS
Zero size window
.RE
.B RA2Eof
.RS
Read ahead to end of file
.RE
.B HitMax
.RS
Hit maximum readahead issue
.RE

.nf
# LUSTRE CLIENT SUMMARY: RPC-BUFFERS (pages)
#Rds  RdK   1K   2K   4K   8K  16K  32K  64K 128K 256K 512K 1024K Wrts WrtK   1K   2K   4K   8K  16K  32K  64K 128K 256K 512K 1024K
.fi

.B xxxK
.RS
Size of rpc buffer distribution buckets in K-pages.  You can find the page size for you system in the header.
.RE

.SH Lustre Meta-Data Server
.nf
# LUSTRE FILESYSTEM SUMMARY
#<------------- MDS --------------->
#CLOSE   GETATTR     REINT      SYNC
.fi

These data fields are identical to brief format

The following format is only available on HP SFS systems and reports the size of the actual I/O reqests
sent to the disk driver.

.nf
# LUSTRE DISK BLOCK LEVEL SUMMARY
#Rds  RdK 0.5K   1K   2K   4K   8K  16K  32K  63K  64K  65K  80K  96K 112K 124K 128K 129K 144K 252K 255K 256K 257K 512K   1M   2M Wrts WrtK 0.5K   1K   2K   4K   8K  16K  32K  63K  64K  65K  80K  96K 112K 124K 128K 129K 144K 252K 255K 256K 257K 512K   1M   2M
.fi

.B Rds
.RS
Reads/sec
.RE
.B RdK
.RS
KBs read/sec
.RE
.B xxxK
.RS
Distribution of read requests by I/O request size
.RE
.B Wrts
.RS
Writes/sec
.RE
.B WrtK
.RS
KBs written/sec
.RE
.B xxxK
.RS
Distribution of write requests by I/O request size
.RE

.SH Lustre Objest Storage Servers

At the summary level, -s l, the numbers reported are the totals for all the OSTs on the server.
At the detail level, -s L, the same data is reported for individual OSTs.

.nf
# LUSTRE FILESYSTEM SUMMARY
#<------------------- OST ------------------>
#READ OPS   READ KB      WRITE OPS   WRITE KB
.fi

These data fields are identical to brief format

.nf
# LUSTRE FILESYSTEM SUMMARY
#<-----------------------reads----------------------- OST -------------------writes------------------------->
#Rds  RdK   1K   2K   4K   8K  16K  32K  64K 128K 256K 512K 1024K Wrts WrtK   1K   2K   4K   8K  16K  32K  64K 128K 256K 512K 1024K
.fi

These data fields are identical to the rpc-buffers for lustre clients.

.nf
# LUSTRE DISK BLOCK LEVEL SUMMARY
#Rds  RdK 0.5K   1K   2K   4K   8K  16K  32K  63K  64K  65K  80K  96K 112K 124K 128K 129K 144K 252K 255K 256K 257K 512K   1M   2M Wrts WrtK 0.5K   1K   2K   4K   8K  16K  32K  63K  64K  65K  80K  96K 112K 124K 128K 129K 144K 252K 255K 256K 257K 512K   1M   2M
.fi

These data fields are identical to the block level data reports for an MDS, again 
only on HP SFS systems.

.SH Memory
.nf
# MEMORY STATISTICS
#<-------------Physical Memory-----------><-----------Swap----------><-Inactive-><Pages/sec>
#   TOTAL    USED    FREE    BUFF  CACHED     TOTAL    USED    FREE     TOTAL     IN    OUT
.fi

.B Total
.RS
Total physical memory
.RE
.B Used
.RS
Used physical memory.  This does not include memory used by the kernel itself.
.RE
.B "Swap Total"
.RS
Total Swap
.RE
.B "Swap Used"
.RS
Used Swap
.RE
.B "Swap Free"
.RS
Free Swap
.RE
.B Inactive
.RS
Inactive pages.  On ealier kernels this number is the sum of the clean, dirty
and laundry pages.
.RE
.B "Pages/Sec In"
.RS
Total number of pages read by block devices
.RE
.B "Pages/Sec Out"
.RS
Total number of pages written by block devices
.RE

.SH Network

The entries for error counts are actually the total of several types of errors.
To get individual error counts, you must report details on individual
inter
faces in plot format by specifying -P.
Transmission errors are categorized by errors, dropped, fifo, 
collisions and carrier.
Receive errors are broken out for errors, dropped, fifo and fragments.

.nf
# NETWORK SUMMARY (/sec)
#InPck  InErr OutPck OutErr   Mult   ICmp   OCmp    IKB    OKB
.fi

.B InPck
.RS
Incoming packets/sec
.RE
.B InErr
.RS
Incoming errors/sec
.RE
.B OutPck
.RS
Outgoing packets/sec
.RE
.B OutErr
.RS
Outgoing errors/sec
.RE
.B Mult
.RS
Outgoing multicast packets/sec
.RE
.B ICmp
.RS
Incoming compressed packets/sec
.RE
.B OCmp
.RS
Outgoing compressed packets/sec
.RE
.B IKB
.RS
Incoming KB/sec
.RE
.B OKB
.RS
Outgoing KB/sec
.RE

.nf
# NETWORK STATISTICS (/sec)
#Num    Name  InPck  InErr OutPck OutErr   Mult   ICmp   OCmp    IKB    OKB
.fi

.B Num
.RS
Individual interfaces are numbered starting at 0.
.RE
.B Name
.RS
Interface name
.RE

.SH NFS

These statistics will be reported for V3 servers by default but you can
choose a different version and/or client data via -O.  They correspond
to the net, rpc and protocol specific sections of the nfsstat utility.

.nf
# NFS SERVER (/sec)
#<----------Network-------><----------RPC---------><---NFS V3--->
#PKTS   UDP   TCP  TCPCONN  CALLS  BADAUTH  BADCLNT   READ  WRITE
.fi

.B Pkts
.RS
Total network packets, which is the sum of UDP and TCP
.RE
.B UDP
.RS
Number of UDP packets/sec
.RE
.B TCP
.RS
Number of TCP packets/sec
.RE
.B TCPConn
.RS
Number of TCP connections/sec
.RE
.B Calls
.RS
Number of RPC calls/sec
.RE
.B BadAuth
.RS
Number of authentication failures/sec
.RE
.B BadClnt
.RS
Number of unknown clients/sec
.RE
.B Read
.RS
Number of reads/sec
.RE
.B Write
.RS
Number of writes/sec
.RE

The data reported for clients is slightly different, specifically the 
retrans and authref fields.

.nf
# NFS CLIENT (/sec)
#<----------RPC---------><---NFS V3--->
#CALLS  RETRANS  AUTHREF    READ  WRITE
.fi

.B Retrans
.RS
Retransmitted calls
.RE
.B Authref
.RS
Authentication failed
.RE

The detail data for nfs maps directly to the output of nfsstat.
Client and server data is always the same for a given version.

.nf
# NFS V3 SERVER (/sec)
#NULL GETA SETA LOOK ACCS RLNK READ WRIT CRE8 MKDR SYML MKND RMOV RMDR RENM LINK RDIR RDR+ FSTA FINF PATH COMM
.fi

There are less, and some different fields for V2.

.nf
# NFS V2 SERVER (/sec)
#NULL GETA SETA ROOT LOOK REDL READ WCAC WRIT CRE8 RMOV RENM LINK SYML MKDR RMDR RDIR FSST
.fi

.SH Processes
.nf
# PROCESS SUMMARY (faults are /sec)
# PID  User     PR  PPID S   VSZ   RSS  SysT  UsrT Pct  AccuTime MajF MinF Command
.fi

.B PID
.RS
Pid of the process
.RE
.B User
.RS
Name of user which this process is running under.  In playback mode on a 
different machine, use -oP to direct collectl to use the password file named in
collectl.conf (default is /etc/passwd) to lookup the corresponding username.
Otherwise the UID will be reported instead.
.RE
.B PR
.RS
Process priority
.RE
.B PPID
.RS
PID of this process's parent
.RE
.B S
.RS
Process State: S - Sleeping, D - Uninterruptable Sleep, R - Running, Z - Zombie or T - Stopped/Traced
.RE
.B VSZ
.RS
This is the amount of VS memory used by this process.
.RE
.B RSS
.RS
This is the amount of RSS memory used by this process.
.RE
.B SysT
.RS
The amount of System Time this process used during this interval
.RE
.B UsrT
.RS
The amount of User Time this process used during this interval
.RE
.B Pct
.RS
Percentage of the current interval taken up by this task (the User and System
time are used for this calculation)
.RE
.B AccuTime
.RS
Total accumulated System and User time since the process began execution
.RE
.B MajF
.RS
Major Page Faults per second
.RE
.B MinF
.RS
Minor Page Faults per second
.RE
.B Command
.RS
Command that is running.  Path and command line options are NOT included
.RE

.SH Slabs
.nf
# SLAB SUMMARY
#<------------Objects------------><--------Slab Allocation-------><--Caches--->
#  InUse   Bytes    Alloc   Bytes   InUse   Bytes   Total   Bytes  InUse  Total
.fi

.B "Objects InUse"
.RS
Total number of objects that are currently in use.
.RE
.B "Objects Bytes"
.RS
Total size of all the objects in use.
.RE
.B "Objects Alloc"
.RS
Total number of objects that have been allocated but not necessarily in use.
.RE
.B "Objects Bytes"
.RS
Total size of all the allocated objects whether in use or not.
.RE
.B "Slab Allocations InUse"
.RS
Number of slabs that have at least one active object in them.
.RE
.B "Slab Allocations Bytes"
.RS
Total size of all the slabs.
.RE
.B "Slab Allocations Total"
.RS
Total number of slabs that have been allocated whether in use or not.
.RE
.B "Slab Allocations Bytes"
.RS
Total size of all the slabs that have been allocted whether in use or not.
.RE
.B "Caches InUse"
.RS
Not all caches are actully in use.  This included only those with non-zero
counts.
.RE
.B "Caches Total"
.RS
This is the count of all caches, whether currently in use or not.
.RE

The detail output form adds the name field and loses the caches fields

.nf
# SLAB DETAIL
#                      <-----------Objects----------><---------Slab Allocation------>
#Name                  InUse   Bytes   Alloc   Bytes   InUse   Bytes   Total   Bytes
.fi

.B Name
.RS
Name of the slab
.RE

.SH Sockets
.nf
# SOCKET STATISTICS
#      <-------------Tcp------------->   Udp   Raw   <---Frag-->
#Used  Inuse Orphan    Tw  Alloc   Mem  Inuse Inuse  Inuse   Mem

.B "Used"
.RS
Total number if socket allocated which can include additional types such as domain.# LUSTRE CLIENT SUMMARY
# Reads ReadKB  Writes WriteKB

.RE
.B "Tcp Inuse"
.RS
.RE
.B "Tcp Orphan"
.RS
.RE
.B "Tcp Tw"
.RS
.RE
.B "Tcp Alloc"
.RS
.RE
.B "Tcp Mem"
.RS
.RE
.B "Udp Inuse"
.RS
.RE
.B "Raw Inuse"
.RS
.RE
.B "Frag Inuse"
.RS
.RE
.B "Frag Mem"

.SH TCP/IP Statistics

.nf
# TCP SUMMARY (/sec)
# PureAcks HPAcks   Loss FTrans
.fi

These are identical to the brief form

.SH AUTHOR
Copyright 2003-2007 Hewlett-Packard Development Company, LP
collectl may be copied only under the terms of either the Artistic License
or the GNU General Public License, which may be found in the source kit
